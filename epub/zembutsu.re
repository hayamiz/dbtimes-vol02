

= Muninは舞い降りたーThe Munin has landedー

//raw[|html|<div style="text-align: right">前佛 雅人 (@zembutsu)</div>]

== はじめに

当文書は、インフラエンジニアである筆者がリソース監視の必要性を訴えるものである。
本書はデータベース本ということであり、
「データベースと俺とリソース監視」をテーマに掲げているが、
いささかサーバ運用全般に対する一般論となっていることを容赦願いたい。
とりわけ、ホスティング事業者における運用業務視点において、
筆者の独断と偏見に基づく主張であることをあらかじめお断りしておく。

== 「何となく重い」を視覚化する必要性

==== 「原因がよく分からないので、調べてもらえますか？」

私の業務の１つは、ホスティング事業者における運用サポートである。
ホスティングは、単なるマシンやネットワーク等のインフラ貸しではない。
情報サービス業である。そのため、サーバ監視やトラブル時の障害対応のほか、
お客さまから寄せられる運用上のトラブルシューティングも行う。
一般的にサポートと呼ばれるこの業務は、物理レイヤからOSまわりだけでなく、
ソフトウェアの設定やチューニングの提案など、幅広い。

そんな業務をこなす日常だが、ここ数年、お客さまから特徴的な依頼が増えている。
それが、「何となく重い」システムに対する調査と対応依頼である。
この「重い」という言葉は、主観を含む抽象的な表現だ。

重さとは、（この業界の方にとっては自明であるが）
サーバの重さが数十kgなどという物理的な重量ではない。
サーバ上で動くソフトウェアなりサービスに対する重さ（レスポンスの悪さやレイテンシ）に対する比喩なのだ。

かつて、物理的なスペック不足により
（Webアプリケーションなりデータベースの動作が）重たいと表現することが多かった。
これは、ハードウェアが原因だと比較的特定が容易だったためである。
10年前のWeb系のサービスであれば、
せいぜいマシンはWebサーバが数台とデータベースサーバが
1～2台で賄うことができたであろう。
対象となる機器が少ないため、
原因特定はハードウェアのCPUなりメモリと言ったリソース不足、
あるいは、ネットワーク帯域が圧迫しているだろうと予測が立てやすかったのだ。

==== SNSとクラウドコンピューティングが業界を変えた

しかし、昨今は特定が一筋縄にいかない現象が発生してきている。
それは、ソーシャルネットワーク(以下SNS)の幅広い普及と、
クラウドコンピューティング技術の発達であると私は考えている。

１つはSNS。
従来は、アクセスのピークは予測しやすく、せいぜい不意な炎上や、
匿名掲示板やYahoo! Japanのトップページからのリンクだけを恐れればよかった。
一方、今日のSNSの普及により、
サービス提供者の意図しないタイミングで
アクセスのピークが発生しうる環境が整ってしまった。
しかも、瞬間的に想定以上のアクセスが殺到しうる時代になってしまっているのである。

そしてもう1つはクラウドコンピューティングの登場である。
システムはスケールアウトできる前提で設計され、
必要に応じてサーバ・リソースを増減できる環境が整ったのだ。
アプリケーション・エンジニアや経営層にとっては福音と言えるこの技術である。
クラウドコンピューティングでなくとも、
サーバや各種ハードウェアは比較的安価に入手できる環境となり、
必要に応じて、物理サーバの増減も容易な環境が整った。

だが、現場の運用にとっては、管理対象サーバ（リソース）が目まぐるしく変化するので、
むしろ管理コストが増え、仕事が大変になったと感じることが多い。

==== 「今すぐ調べてもらえますか？」

業界を取り巻く環境が変われば、自ずとトラブルシューティングの在り方も変わってくる。
単なる調査であれば、時間の猶予さえ許されれば、
じっくり検証・調査を行うことができる。
90年代後半、日本国内のインターネット黎明期であれば、
時間がかかっても原因調査に時間をかけるような風潮があったように記憶している。
だが、そんな牧歌的な業界も、SNSの普及によって幻想を打ち壊される。

SNSの良いところは、
良い情報は口コミで短時間に多くの人達に情報が伝播されるという点である。
アッという間にアクセスのピークを迎えてしまうので、
もしもトラブルが発生した場合は、直ちに対処しなくてはいけない。
普通のWebサイトであればまだしも、SNS上で展開されているソーシャルゲームであれば、
短時間で多数のリアルマネー損失を招きかねない。
それどころか、悪評が広がれば機会損失にもつながってしまう。

このように、環境が、時代が、迅速な対応を求めているのである。
一刻の猶予も許されないのだ@<fn>{zembutsu-01-fn-1}。
//footnote[zembutsu-01-fn-1][この環境は、正直、私にとってもソーシャルゲームのサポートは心臓に悪いなと感じることが多い。]

==== 監視手法の変化を強いられている

かつてのトラブルシューティングは、各サーバにログインするところから始まる。
uptimeやfree・ps・top等といったコマンドを叩くのも効果があった。
過去の経緯を知りたければ、サーバの中のsysstat(sarコマンド)で確認もできた。

だが、今日ではそのような余裕は許されない。従来の手法では、
トラブル対応に時間がかかってしまうからだ。
仮に担当要員が多かったとしても
チーム内で情報や知識を共有する時点でロスが発生してしまう。

SNSやクラウドコンピューティングの時代、管理対象が増え、
かつ短時間でトラブル対応を行うには、どうしたらよいのであろう。
この状況に適しているのがリソース監視ツールであり、とりわけMuninであると考える。

== そしてMuninは舞い降りる

==== Muninとは何なのか？

Muninはリソース監視ツールである。オープンソース(GPLv2)で公開されており、
開かれたオープンなコミュニティで緩やかな開発が行われている。
Perlを基盤としているので、Linux系やMacOS Xで動作する。
なお、ここで述べるリソースとは、サーバ上の物理リソースのみならず、
OS上の様々なパラメータや、アプリケーションのステータスも含む
（今日で言うところのメトリクスという表現が適切かもしれない）。

Linuxにおけるリソース監視ツールといえば、MRTGが老舗であり、元祖であろう。
MRTGはSNMPを用いて定期的にサーバのリソース情報を取得する。
そして、グラフを生成し、人間はウェブを通してリソース状況を知覚することができる。
MRTGは、サーバにログインしなくても
様々なリソースを瞬時に把握できるという点で画期的であった。

MRTGのような設計思想で、
RRDToolの開発や、
RRDtoolをベースにしたGangliaやZabbix等のリース監視ツールが普及し始める。
どれも便利なのだが、RDBMSの管理を行わなくてはいけないなど、管理上面倒であった。

そんな折、シンプルかつパワフルな設計思想を備えたMuninの開発が始まる。

==== 歴史

Muninは2002年にプロジェクトがスタートした。
少し古め？と思うかもしれないが、
MRTGやGanglia・Cacti等のリソース監視ツールと比べると、歴史は浅い方だ。
また、Muninという名称も、当初はLinpro RRD(LRRD)という名称でスタートしている。
開発は主にノルウェーのLinpro社が行っていた。
その後、2004年にMunin1.0がリリースされる。
この前後で、開発体制は現在のコミュニティ主導による開発体制へと緩やかに移行した。
その後、2009年にMunin 1.4がリリースされ、普及のための素地が出来上がる。
そして、2012年5月にMunin 2.0がリリースされて今日に至る。

Muninの仕組みはシンプルなサーバ・クライアント構成である。
クライアント(munin-node)からデータを収集し、収集したデータはRRDToolに格納され、
グラフが生成される。
この基本アーキテクチャはサービスリリースから今日に至るまで変更はない。

ところで、開発途上で、クライアントであるmunin-nodeはmunin-eyeという名称だったという興味深い逸話がある。Muninの開発が始まったのはノルウェーなのであるが、
Muninという名は北欧神話に出てくるワタリガラスにちなんでいる。
Munin-eyeという名前には、そのMuninの眼という意味が込められているのではないだろうか。
神話の中でMuninはオディン神の片眼になりかわり、ミッドガルドの地を飛び交い、様々な情報を収集したという。そう、ネットワーク上のサーバから様々な情報を収集するmunin-nodeは、神話の中のMuninの姿と重なって見えるのだ。

==== 他の類似ツールとの違い

Muninが他のツールと違うのは、その設計思想である。
Muninは「シンプルかつパワフルに」という点に絞られているのだ。
ゆえに、メーリングリストやIRCでの議論において、
判断となるのが設計思想に一致するかどうかである。
よく、機能拡張のリクエストが寄せられるが、
仕組みが複雑になるからと却下されることもみうけられる。

そのため、一見すると機能が貧弱に見えなくもない。
ユーザ管理もできなければ、
データ収集サーバが落ちたときにどうするか？といったデータ保全性も考慮されていない。
また、大規模（数千台規模）のシステムでは使えない。
これはアーキテクチャ上に限界があるためだ。

しかし、私はそれでも、シンプルな設計思想ゆえ、機能は最低限で十分だと思っている。
もし大規模な環境で使いたいのであれば、他のツールを使えばよいからだ。
Muninは手軽だからこそ、セットアップも非常にシンプルであるし、
設定もこの類のツールとしては簡単である。
また、snmpdや各種RDBMSを用いないため、管理上の手間が減る所は、
運用担当者としては有り難い所である。

これまでに、このように楽にリソースを監視できるツールがあったであろうか。
簡単なセットアップを行うだけで、システムの様々な情報を取得してくれる。
ハードウェアリソースであるCPU・メモリ・スワップ領域の推移のほか、
ディスクのI/Oやレイテンシに関する情報もデフォルトで取得できる。
また、プラグインのセットアップを行えば、
ApacheやNginxといったWebサーバのスループットやコネクション数の取得や、
MySQLやPostgreSQLのデータベースのクエリ状況やスレッド状況なども、
グラフ化して把握できるのである。

様々なメトリクスを一覧表示して見ることができるのもMuninの大きな特長の1つである。
Webサーバのみならず、データベースサーバやキャッシュサーバの情報を
1つの画面上に集約できる。
そのため各サーバ間の関係や、どのサーバがボトルネックになっているかの判断が
瞬時に行えるのである。
私にとって、Muninはトラブルシューティングにとって欠かせなくなっている。

== 人間がボトルネックになって良いわけがない

==== 私は楽がしたいのです

正直に話すと、私は非常に面倒くさがり屋である。
机の上を片付けるのはおっくうだし、
家でも新聞や雑誌が床の上で平積みになっている。
何事においても面倒なことが嫌なのだ。プライベートでも、仕事でも、とにかく楽がしたい。
だから常々考えているのは、どうすればIT業界で働く人間の仕事はもっと楽になるのかということだ。

昼夜を問わず戦い続けているイメージのためか、IT業界の仕事は「ドカタ」と形容されることが多い。
実際、私もお客さまのアクセスピークに備えて勤務時間が深夜まで及んだり、
真夜中に携帯で呼び出しをくらい、そのまま障害対応を行うということがある
@<fn>{zembutsu-01-fn-2}。
//footnote[zembutsu-01-fn-2][しかし、ITドカタというのは感心しない表現である。実際の土木建設業界では安直な精神論だけがまかり通るということはなく、リスクマネジメントの観点から勤務時間や制度が整えられている。]

そのような過酷な現場で働く者たちの負担を少しでも減らす手段はないのだろうか。
そこに光明をもたらすのが、Munin等のリソース監視ツールである。
人間が楽をすることは決して悪いことではない。むしろ、もはや根性で乗り切れるような仕事ではなくなっているという現実に目を背けていてはならないのだ。そうすれば、IT「ドカタ」と揶揄されることもないはずだ。

==== 君がログを読まなくて良い世界を作りたい

避けなくてはいけないのは、人間がボトルネックになることである。
SNSを通したリアルタイム性と
仮想化技術をまとったクラウドコンピューティングにより、
この業界は大きく変化した。単純なクライアント・サーバシステムが普通だった頃とは、
もう時代も環境も違うのだ。

従来はログを読める技術者が重宝されたであろうが、
もはや単にログを読むことは必要とされていない。
様々なログをトリガとして、状況を瞬時に把握するためのスキルが必要とされているのだ。
そのスキルは何も「あなたが神か！」という超人的な能力を必要とされているわけではない。
グラフを通し、瞬時にサーバなりリソース現状を読み取ることができれば、
まずは十分なのだ。

私の場合は、たまたまリソース監視にMuninが最適であったが、
リソースツールは他にも様々なものが公開されている。
もしもあなたがリソース監視を行っていない業界関係者であるならば、
本稿を読み次第、直ちに監視を開始すべきである。
もちろん、それは始まりにすぎない。未来の天気を予測するために、気象データの収集を始めた段階である。リソース監視によるデータの蓄積なくして、システムの動向を予測することなどできないのである。

いずれは、リソース監視で得られたデータを元に
予測を行える仕組みの開発が必要だと考えている。
否、考えているという表現は適切ではなく、その必要性を強く感じている。
人間の仕事を楽にするために、開発しなくてはいけないものがあるはずだ。
同じような問題を抱える同士がいたら、是非アイディアを出し合って、
この業界を変えていこうではないか。
