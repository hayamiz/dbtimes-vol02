% -*- coding: utf-8 -*-

= IRRの歩き方

//raw[|html|<div style="text-align: right">yuyarin</div>]

//lead{
インターネットにおけるドメイン間ルーティングでは、運用の利便性やセキュリティの面から経路情報を管理するデータベースが求められている。
そこで使われるのがルーティングポリシーを記述することを目的としたIRR(Internet Routing Registry)というシステムである。
本稿ではIPルーティングの基礎を簡単に述べた後に、ドメイン間ルーティングの運用と経路ハイジャックの問題について述べ、
IRRの仕組みと使い方、またIRRの抱える問題の現状を紹介する。

この記事ではIP通信の基礎(IPアドレスとサブネット、パケット転送の仕組み)に関する知識を有していることを前提とすることをご了承頂きたい。
//}

== AS間ルーティングと経路フィルタ

=== 経路交換とルーティング

IPネットワークの役割は宛先のノードまでIPパケットを届けることであるが、
宛先に対してパケットを届けるためには、どのルータにパケットを転送すればよいかを知る必要がある。
パソコンなどのエンドホストは出口になっているルータ(デフォルト・ゲートウェイ)にパケットをすべて送ればよいが、途中のルータはそうはいかない。
そのためにはルータ間で各自の到達可能な宛先ネットワークの経路情報を広告し合い、経路交換を行う。

経路交換を行い、集められた経路情報からパケットを送信する経路(ベストパス)を決定することをルーティングと呼び、そのためのプロトコルをルーティングプロトコルと呼ぶ。

経路は大きく分けて、宛先ネットワーク、ネクストホップ、メトリックの３つの情報で構成される。
宛先ネットワークは192.0.2.128/25のようにprefixで表現される。
ネクストホップは宛先ネットワークにパケットを送るために次にパケットを転送するノードのアドレスである。
メトリックは宛先ネットワークに対して複数のネクストホップがあった場合にどのネクストホップを優先するかを決めるための値である。
この値の内容はルーティングプロトコルによって異なる。

=== ASとドメイン間ルーティング

１つの同じポリシーで運用されるネットワークの範囲をドメインと呼ぶ。
また、このドメインをAS(Autonomous System, 自律システム)と呼び、4 byteの一意な番号であるAS番号によって区別される。
なのでインターネットはASという自律的なネットワークが相互に接続した「ネットワークのネットワーク」ということができる。

ASの内部で行われるルーティングをドメイン内ルーティング(Intra-domain Routing)と呼ぶ。
ドメイン内ルーティングは各ASで好きなように行うことができる。
日本ではOSPF、北米ではIS-ISが主なルーティングプロトコルとして利用されている。

ASの間で行われるルーティングはドメイン間ルーティング(Inter-domain Routing)と呼ぶ。
ドメイン間ルーティングは全世界のすべてのASで共通のルーティングプロトコルを利用しなければならず、現在はBGP4が利用されている。
ドメイン間ルーティングではドメイン内のルーティングは隠蔽されている。

ある経路について経路広告を行なっている大元のASのことをOrigin ASと呼ぶ。

=== AS間の接続関係

インターネットはASが相互接続してできたネットワークであるという話をしたが、すべてのASが対等に接続しているわけではない。
AS間の関係には大きく分けて上下関係のトランジット(transit)と対等な関係のピア(peer)の２つが存在する。
このASの強弱関係は接続しているASの数や知っている経路の数、つまり到達性の広さで決まってくる。

トランジットはお金を支払って他のASから接続性を買う関係である。「トランジットを買う」とも言う。
接続性を売る側を親ASやトランジッタ、買う側を子ASやカスタマーなどと呼ぶ。
トランジットでは流れるトラフィック量に応じてMbps単価で月額料金が課金されることが多い。

ほとんどのASはトランジットを上位のASから購入している。どこからもトランジットを買わない最上位のASはTier 1と呼ばれる。
現在14のASがTier 1とされており、日本の事業者ではNTT CommunicationsのAS2914が唯一のTier 1である。

一方でピアは強弱関係の近いAS同士が無償で経路交換を行う関係である。
一般に「ピアを張る」と表現されるが、BGPにおける隣接関係をピアと呼ぶため、トランジットの関係でも技術的には「ピアを張る」ので文脈に注意する必要がある。
もともとトランジットを通して行われていたトラフィック交換をピアによって直接行うことにより、従量課金であるトランジットの使用料を下げることができる。

=== 経路広告とトラフィックコントロール

さて、経路広告を行うと、当然その経路宛のパケットが流れこんでくる。
正確には対向ASのルータにおいてルーティングのプロセスでベストパスに選ばれれば、である。
経路広告をしてもらうと、その経路宛のパケットが対向ASのルータに吸い込まれる。
自分ASのルータでベストパスに選ばれた対向ルータに吸い込まれるが、自分のASのルータなので制御は簡単である。

必要なトラフィックは自分のASを通して流しても良いが、自分に全く関係のないトラフィックであれば、
たとえお金のかからないピアであっても流したくないし、ましてやお金のかかるトランジットには死んでも流したくない。
平たく言えばタダ乗り禁止である。トラフィックが増えるほど設備が必要になるからだ。

そういった経済的な動機によって、トラフィックをコントロールしなければならないのだが、基本原則は存在する。
トランジットでは、親ASは子ASの広告する経路を全世界に対して広告する責任があり、子ASは親ASからの経路をすべて受け入れる。
ピアでは、自分の子ASと自ASの経路を広告し、ピア先のASとその子ASの広告する経路を受け入れる。
このへんの詳しい話は非常に面白いところだけれども、今回の本題からは逸れるのでまたの機会に。

トラフィックをコントロールする方法はいくつか存在するが、AS間においてはまず経路を広告するかしないかの二択である。
メトリックなどの細かいパラメータは経路を広告すると決めてからの話である。

=== 経路フィルタ

どの相手にどの経路を広告するか、どの相手からのどの経路広告を受け入れるか、それを制御するためにルータに経路フィルタを設定する。
そのため、自ASが新しく経路広告を行うときは隣接ASにそれを伝えてフィルタを開けてもらわなければいけいない。
これにはメールが使われていることが多いが、隣接ASが自ASの経路を広告している場合は、さらにその隣接ASにもフィルタを空けてもらう必要がある。
このようなケースはトランジットで起こりうるのだが、最上位のTier 1の労力は半端なものではない。
AS Rank@<fn>{yu-fn-00}によればAS2914は全世界の約1/3の13,242の子ASを抱えて156,530のIPv4の経路を広告している。
人手のかかるメールなんかではやってられないので、経路情報をデータベース化して自動的にフィルタを生成して反映される仕組みが必要になってくる。
//footnote[yu-fn-00][http://as-rank.caida.org/]

== 資源管理と経路ハイジャック

=== AS番号とIPアドレスの関係

インターネットは自律的なシステムではあるが、AS番号やIPアドレスなどの資源は重複利用が生じないように誰かが統一的に管理を行わなければならない。
こういった資源は階層的に組織されたInternet Registryによって管理されていて、
日本の場合では、最上位のIANA、アジア太平洋地域のAPNIC、日本国のJPNICのようにして階層的に資源が割り当てられている。
ちなみに欧州地域はRIPE、北米地域はARINで、日本におけるAPNICに相当する。
日本国内でAS番号やIPアドレスを取得する場合はJPNICを窓口として割り振りを受ける。

AS番号もIPアドレスもそれぞれが取得を申請した組織や個人に割り振られるため、AS番号とIPアドレスは資源管理上は直接の関係性を持っていない。
また、一つの組織が複数のASを運用することも多いし、他の組織の子ASにアドレスブロックを貸与することもあるため、
実際にどのASからどの経路が広告されるかは、広告されてみないとわからない

=== 経路ハイジャック

Internet Registryからまだ割り振りを受けていないアドレスブロックや、
他の組織が取得しているアドレスブロックを勝手に広告することは技術的には可能である。
単純にルータにそういう設定を入れればいいだけで、免許のようなものはいらない。
こういう事例を経路ハイジャックと呼ぶ。

前章で経路を流すとトラフィックが流れることを説明した通り、経路ハイジャックを受けると、
本来自分のASに流れるはずだったトラフィックが他のASに流れてしまう。
パケットが到達不能で破棄される可能性や、盗聴・改竄の恐れもある。

経路ハイジャックは頻繁に起きていて、そのほとんどはアドレスの打ち間違いやAS外に出さない経路を漏らしてしまうなどの設定ミスである。
大規模な事件としてはパキスタンテレコムがYouTubeの経路をハイジャックしてしまい、YouTubeにアクセス不能になった事件などが挙げられる。
この事件ではパキスタン国内でYouTubeへのアクセスを遮断するために偽の経路情報を流してトラフィックを吸い込もうとしたところ
設定ミスで偽の経路情報をAS外部に漏らしてしまったのが原因だと言われている。

こうした経路ハイジャックが行われた際に、すぐに気づくことが出来る仕組みが必要になる。
経路ハイジャックかどうかを調べるためには、その経路のOrigin ASが妥当であるかを見ればいいのだが、
前述のとおりASとIPアドレスの対応表なんてものはないため、調べることはできない。

根本的な解決として署名付きの経路を流すBGPsecなどが提案されているが、
ひとまずの運用的な対処として、Origin ASと経路の関係性の情報を持ったデータベースを作成して、
それとBGPで実際に流れている経路を比較することで、ハイジャックを検知する取り組みが行われている。
そのためには当然、正確なOrigin ASと経路の関係性の情報を持ったデータベースが必要になる。

== IRR

=== IRRとは何か

さて、ここまで経路フィルタの自動生成という運用上の問題と経路ハイジャックの検知という２つの目的から、
経路に関連する情報を持ったデータベースが必要になっているという話をした。
そこで登場するのがIRR(Internet Routing Registry)である。
IRRは名前の通り、インターネットのルーティング情報を登録するシステムで、
もともとは高度なルーティングポリシーや運用者情報を記述するためのものである。
Internet Registryが権威的な資源管理をするデータベースを持つのに対して、IRRは運用情報を蓄えたデータベースを目指している。

歴史を少し述べると、IRRは、1980年代のNSFNetの時代にコンフィグを自動生成するための、高レベルなルーティングポリシーを記述するためのデータベース(PRDB)から由来している。
このデータベースのエントリを記述する言語はNetwork Announcement Change Requests(NACR)と呼ばれ、
その後、1994年にRIPE-181という文書で現在使われているオブジェクトクラスベースの構造の概念が導入され、1995年にIETFにてRFC1786として標準化さた。
最終的に1999年にRFC2622 Routing Policy Specification Language (RPSL)として標準化され、RFC4012でIPv6用の拡張が行われ現在に至っている。

IRRではwhoisをプロトコルに使っているためクライアントにはwhoisコマンドを利用することができる。
サーバの実装はRIPE NCCのRIPE DB ServerとMeritのIRRd@<fn>{yu-fn-01}の２つがメジャーである。
//footnote[yu-fn-01][http://www.irrd.net/]

//list[whois][whois]{
$ whois -h jpirr.nic.ad.jp AS4713
$ whois -h whois.radb.net 1.1.1.0/24
//}

=== IRRの構造

IRRにはいくつかの種類のクラスが定義されていて、それらをオブジェクトとして登録していくことで成り立っている。
RFC2622/4012では、
route, route6, aut-num, as-set, route-set filter-set rtr-set peering-set inet-rtr, mntner, role, person
といったクラスが定義されている。このうち今回は特によく利用されているaut-num, route, as-setについて紹介する。
百聞は一見にしかずなので登録されているデータを見て頂きたい。

==== aut-numクラス

aut-numクラスはASを表現したクラスでASという接頭辞の後にAS番号を続けたものをキーに使う。
大体の属性値は見ていただければわかると思うが、特筆したいのが、export/import属性である。
この属性には肝心要のルーティングポリシーを記述することができる。
importの例では、AS-NSPIXP2（これは後述のAS-SETオブジェクト）に含まれるASから広告されるに対して、
経路のpreferenceを100にしながらすべての経路を受け入れるというポリシーを記述している。
一方でAS2501からの経路に対してはAS2501とAS7531の2つのASがOriginである経路しか受け入れない。
exportの例ではAS2504に対してAS7660を除くすべての経路を広告するというポリシーを記述している。
この例はAS2500のWIDE Projectという日本の研究機関のASのものであるが、
先に述べたようにASの接続関係は接続性の売り買いの話につながるため、
ポリシーがオープンなコンテンツプロバイダや研究機関を除いた商用のISPなどで、
ここまで細かく記述されていることは滅多に見かけない。

==== routeクラス
routeクラスは経路情報を表現したクラスで、広告されるプレフィックスをroute属性に使う。
IPv6の経路はroute6クラスで表現される。
origin属性にはその経路を広告するASのaut-numオブジェクトが書かれていて、routeとoriginを合わせてこのオブジェクトのキーとしている。
そのため1つの経路に対して複数のoriginが存在することもある。
運用上複数のOrigin ASから同一の経路を広告する可能性があるため、そのようになっている。

==== as-setクラス
as-setクラスはaut-numオブジェクトの集合体を表現したクラスで、AS-という接頭辞の後に名称を続けたものをキーに使う。
例はAS-OCNというNTT CommunicationsのOCN(AS4713)のas-setである。
このASは国内のトランジット事業者でもあるので多くの子ASを抱えており、その経路を上位のトランジットに対して広告する必要がある。
その際にAS4713の子ASが誰であるかを上位ASはいちいち気にしたくないので、as-setとしてまとめて教えてあげている。

==== mnt-by属性とsource属性
これらのクラスに共通して存在する属性の中にmnt-by属性とsource属性がある。
mnt-by属性はそのオブジェクトを管理している組織を示す属性で、mntnerクラスのオブジェクトが登録される。
mntnrクラスのオブジェクトにはパスワードが設定できるため、mnt-by属性を指定することで他者からのデータの上書きを防ぐことができる。
source属性はそのオブジェクトがどのIRRに登録されたものかを示している。
後述するがIRRは複数の組織で独立して運用されていて、それらの間でデータを同期している。
問い合わせを行うIRRホストと、オリジナルのオブジェクトが登録されているIRRホストは別になるため、この属性が必要になる。

//list[aut-numオブジェクト][aut-numオブジェクト]{
% whois -h whois.radb.net AS2500 
aut-num: AS2500
as-name: WIDE
descr:   WIDE Project in Japan
admin-c: JM46-AP
tech-c:  AK27-AP
import:  from AS-NSPIXP2
           action pref=100;
           accept ANY
import:  from AS2501
           action pref=100;
           accept AS2501 AS7531                     
(snip)
export:  to AS-NSPIXP2 announce AS112 AS2500 AS2501 (snip) AS55384
export:  to AS2504 announce ANY and NOT AS7660      
(snip)
notify:  two@wide.ad.jp
mnt-by:  MAINT-AS2500
changed: kato@wide.ad.jp 20121024
source:  RADB
//}

//list[routeオブジェクト][routeオブジェクト]{
% whois -h whois.radb.net 1.1.1.1
route:   1.1.1.0/24
descr:   Google
origin:  AS15169
notify:  radb-contact@google.com
mnt-by:  MAINT-AS15169
changed: radb-contact@google.com 20121119
source:  RADB
//}

//list[as-setオブジェクト][as-setオブジェクト]{
% whois -h jpirr.nic.ad.jp AS-OCN
as-set:  AS-OCN
descr:   ASes advertised by OCN
members: AS4713,
         AS290,   AS1628,  AS2499,  AS2506,  AS2509,
         AS2515,  AS2518,  AS2526,  AS4680,  AS4683,
         (55 lines snipped)
         AS131154, AS131154, AS131155, AS132095, AS132119
admin-c: Ichiro Mizukoshi
tech-c:  Tomoya Yoshida
notify:  admin@ocn.ad.jp
mnt-by:  MAINT-AS4713
changed: admin@ocn.ad.jp 20121206
source:  JPIRR
//}

=== IRRの運用

IRRは世界の40以上の組織でそれぞれ運用されている。
APNICやJPNIC、RIPEなどのInternet Registryが運用するもの、NTT CommunicationsやLevel3などのISPが運用するもの、Meritなど研究機関が運用するものに分類することができる。
日本から使う場合はJPNICのJPIRR、MeritのRADb(Routing Assets Database)、NTT CommunicationsのNTTCOM RR@<fn>{yu-fn-02}が有名である。
//footnote[yu-fn-02][NTT Communications Global IP Network Routing Registryってなげーよ]

これらのIRRはデータベースを他のIRRと同期しているが、組織の関係によっては同期していないこともある。
例えば研究機関であるMeritの運用するRADBはほとんどのIRRのミラーを行なっている。
NTTCOMはJPNICのJPIRRをミラーしているが、JPIRRはNTTCOMをミラーしていない。
これは公的機関が一営利企業のミラーを行うということに対する大人の事情でそうなっている。

=== IRRが必要とされる場面

IRRは任意で使えばいいデータベースではあるが、利用を迫られる時もある。
基本的には他のASにおいて経路フィルタの自動生成を行うためにIRRが使われる。

例えばNTTCOMやLEVEL3のようなTier1トランジット(ISPのためのISP)では経路フィルタ適用などの運用を簡略化するために、
顧客に対して自身のIRRに経路情報を登録することを求めている@<fn>{yu-fn-03}。
また同様の理由で他のASに対してピアを張るための条件としてIRRの登録を求めるASも存在する。
他にもIX(Internet Exchange)でroute serverを使ってmulti lateral peeringを行う際の経路フィルタの登録などにも利用される。
//footnote[yu-fn-03][http://www.us.ntt.net/support/policy/rr.cfm]

それ以外では、フィルタの生成の他には経路情報からコンタクトパーソンを見つけるためや、障害時のトポロジー把握などに使われる。

== IRRの歩き方

=== IRRで遊ぼう

ではそろそろ手を動かしたくなって疼いてきた頃だと思うので、一般のご家庭でよく使われるIRRの使い方を紹介しよう。

origin ASを指定して経路の一覧を取得するときは!gを使う。
UNIXの場合は!を\でエスケープする必要がある。
メモリ管理が必要な古のプログラムからでも読みやすいように整形されて表示され、Aはデータの長さ、Cは終了を意味している。

//list[][]{
% whois -m \!gAS7521
A116
210.173.160.0/19 210.173.176.0/24 210.173.178.0/25 218.100.45.0/24 (snip)
C
//}

AS-SETをASの一覧に展開したいときは!iオプションを使う。AS-SETの中にAS-SETが含まれるような場合は,1をつければAS-SETの再帰展開を行うことができる。

//list[][]{
% whois -m \!iAS-GOOGLE,1 
A126
AS11344 AS13949 AS1424 AS15169 AS19425 AS22577 AS26910 AS36040 (snip)
C
//}

指定したASがメンテナになっているオブジェクトを列挙する場合は!oオプションを使う。
だいたいこの出力に属性名でgrepをかけて整形して利用する。

//list[][]{
% whois -m \!oMAINT-AS7521 
A10130
route:      210.173.160.0/19
descr:      INTERNET MULTIFEED CO.
(snip)
aut-num:    AS7521
as-name:    MFEED
(snip)
source:     JPIRR
C
//}

sourceによっては情報が間違っていたりすることがあるので、情報の信頼性の高いsourceだけを指定したくなる場合がある。
その際には-sオプションを利用して特定のsourceのオブジェクトを取り出す。
ただしダブルクオーテーションで囲ってwhoisのオプションに間違われないようにする。

//list[][]{
% whois -h jpirr.nic.ad.jp -- "-s JPIRR AS7521"
aut-num:    AS7521
as-name:    MFEED
(snip)
source:     JPIRR
//}

=== もっと楽しいIRRの遊び方

ISC(Internet Systems Consortium)が開発しているIRRToolSet@<fn>{yu-fn-04}を使うことでもっと快適なIRR生活を送ることができる。
//footnote[yu-fn-04][http://www.isc.org/software/irrtoolset]

pevalはIRR用にwhoisをもっと簡単にしたものである。as-ocn and as-iijのような記述をすればOCNとIIJの両方から広告されているプレフィックスの一覧（OCNとIIJでマルチホーム接続しているASの経路）を取得することができる。

//list[][]{
peval "as-ocn"
({223.223.164.0/24, 223.223.165.0/24, 223.223.166.0/24, ... })
peval "as-ocn and as-iij"
src/peval/peval "as-ocn and as-iij"
({223.223.160.0/22, 223.223.0.0/17, 223.29.244.0/22, ...})
//}

RtConfigはCiscoやJuniperのルータ用のフィルタやstatic routeを生成することができるツールである。
下の例ではciscoとJuniperのprefixリストを生成している。

//list[][]{
% rtconfig -cisco_use_prefix_lists
rtconfig> @RtConfig access_list filter AS15169
!
no ip prefix-list pl100
ip prefix-list pl100 permit 1.0.0.0/24
ip prefix-list pl100 permit 1.1.1.0/24
ip prefix-list pl100 permit 1.2.3.0/24
ip prefix-list pl100 permit 8.8.4.0/24
ip prefix-list pl100 permit 8.8.8.0/24
ip prefix-list pl100 permit 8.34.208.0/20 ge 21 le 21
ip prefix-list pl100 permit 8.34.208.0/20 ge 23 le 24
(snip)
ip prefix-list pl100 deny 0.0.0.0/0 le 32

% rtconfig -config junos
rtconfig> @RtConfig access_list filter AS290
policy-statement prefix-list-100 {
  term prefixes {
    from {
      route-filter 45.1.0.0/16 exact accept;
      route-filter 130.128.0.0/15 prefix-length-range /16-/16 accept;
      route-filter 202.17.221.0/24 exact accept;
    }
  }
  term catch-rest {
    then reject;
  }
}
//}


=== 経路奉行

経路ハイジャックを検知するためにIRRに登録された経路情報とBGPに流れている経路情報を比較することが可能で、
その取り組みの一つがTelecom-ISAC Japanの経路奉行である。
経路奉行には日本の主要ISP14社18ASが参加している。
参加ASはJPIRRに経路情報を登録する一方で経路奉行にBGPのUpdateメッセージ(経路広告の更新情報)を流しこむことで、
経路奉行がIRRの情報とBGPの情報を比較して、ハイジャックが疑われる場合にアラートをあげるという仕組みになっている。
IRS23における発表では月2.75件の経路ハイジャックが起きているようだ。

=== IRRの抱える問題


さて、ここまで読む限りでは経路情報も管理できるようになったし、素敵なツールでフィルタも自動生成できるようになったし、
経路ハイジャックの検知まで出来るようになって、一見、完璧で幸福なシステムが出来上がったかのように思える。
しかしながらIRRは幾つかの問題を10年以上に渡り未だに抱えている。

まずはは乱立するIRRと網羅性の問題である。
1999年半ばにMeritがIRRdのソフトウェアを配布した後、RADbは有料化されてしまったため、
ISPなどが各々でIRRを立てることになってしまい、情報が分散してしまった。
過去最高59個のIRRが地球上に存在したことがある。
これによって一部のIRRにしかない経路や、管理が放置されて古くなってしまった経路情報などが出てきた。
利用者としてもどのIRRに情報を登録すればいいのか考えなくてはならない。

次に情報の正確性の問題である。
先ほど述べたように情報が古いままになっているケースやIRR間で整合性がとれていない状態が存在する。
IRRは自己申告のシステムなので、他の組織が適当なIRRに経路情報を勝手に登録することがある。
これは未使用のアドレスなどに多く、フィルタなどの必要性からIRRに登録され(Proxy Registered)、
アドレスを他の組織が使おうとした時に、既にIRRに登録されていて情報を更新する権限がないような事例がある。
IRRの管理者に申し立てても、影響の大きさや色々な都合でなかなか消してもらえないことが多い。

また、IRRの安定性の問題もある。
過去にはIRRにフィルタを依存していたせいで、そのIRRが停止した時にネットワーク内のすべての経路がdenyされて全断するISPもあった。
Altdbなどは運営者が不慮の事故により他界されたため、昔の情報が削除されないままになっていたりする。

=== 頑張るJPIRR

こうした問題を解決するためには、IPアドレスやAS番号の資源を管理するInternet Registryが音頭を取って、
公正で正確な情報を蓄えたIRRを実現する必要があると主張されてきた。
そのため日本のJPNICが運用するJPIRRは、IRRの情報の精度を上げるよう取り組みを続けており、
それによって経路奉行のような経路ハイジャック検知を可能としている。

= おわりに

今回はIRRというインターネットの運用を何とかして楽にしようと、良くしようとしたデータベースを紹介した。
研究や大規模商業システムで使われるデータベースに比べれば、データベースと呼べないほど、単純で小さいものであるけれども、
インターネットという自律分散システムの中では精度を高くして運用するのは非常に難しい。

このようにインターネットの幸福のために頑張ってデータベースを運用している人たちのこと、時々でいいから思い出してください。

//raw[|html|<div style="text-align: right">おわり</div>]